#!/usr/bin/env python3

import csv
from datetime import datetime
import json
import os
from os.path import join
from multiprocessing import Pool
import sys

csv_kwargs = {
    'dialect': 'excel',
    'doublequote': True,
    'quoting': csv.QUOTE_MINIMAL
}

cwd = os.getcwd()
data_dir = cwd
module = sys.modules[__name__]

def get_value(d, path):
    val = d
    for k in path:
        val = val.get(k)
        if val is None: break
    if type(val) is list:
        val = ';'.join(map(str, val))
    assert val is not None or 'id' not in path
    return val

def convert(json_filename, csv_filename, handler, columns):
    with open(json_filename, 'r') as fi, open(csv_filename, 'w') as fo:
        writer = csv.writer(fo, **csv_kwargs)
        writer.writerow([name for name, _ in columns])
        for line in fi:
            d = json.loads(line)
            handler(d) # possibly modify the data before writing
            writer.writerow([get_value(d, path) for _, path in columns])

def escape(text):
    # neo4j-import supports escaping quotes with both "" and \", but
    # csv.writer by default only uses doublequote, and won't escape
    # backslashes, and will output crap like ":\" which causes neo4j-import
    # to choke...
    return text.replace('\\', '\\\\')

def date_to_epoch(s):
    year, month, day = map(int, s.split('-'))
    return int(datetime(year, month, day).timestamp())

class HandleBusiness:
    def __call__(self, business): pass

class HandleCheckin:
    def __call__(self, checkin): pass

class HandleReview:
    def __call__(self, review):
        review['date'] = date_to_epoch(review['date'])
        review['text'] = escape(review['text'])

class HandleTip:
    def __call__(self, tip):
        tip['date'] = date_to_epoch(tip['date'])
        tip['text'] = escape(tip['text'])

class HandleUser:
    def __init__(self):
        self.f = open(join(data_dir, 'friends.csv'), 'w')
        self.writer = csv.writer(self.f, **csv_kwargs)
        self.writer.writerow([':START_ID(User)', ':END_ID(User)'])

    def __del__(self):
        self.f.close()

    def __call__(self, user):
        for friend in user['friends']:
            self.writer.writerow([user['user_id'], friend])

def read_columns(names):
    columns = []
    for name in names:
        index = name.rfind(':')
        path = name[0:index] if index > -1 else name
        path = path.split('.')
        columns.append((name, path))
    return columns

def run(name):
    columns = read_columns(getattr(module, name))
    handler = getattr(module, 'Handle' + name.capitalize())()
    convert(join(data_dir, 'yelp_academic_dataset_' + name + '.json'),
            join(data_dir, name + '.csv'),
            handler,
            columns)

# column names to import from JSON into CSV format; these were generated by
# the columns.py script, then manually annotated with type and labels
business = [
    'attributes.Accepts Credit Cards',
    'attributes.Accepts Insurance',
    'attributes.Ages Allowed',
    'attributes.Alcohol',
    'attributes.Ambience.casual',
    'attributes.Ambience.classy',
    'attributes.Ambience.divey',
    'attributes.Ambience.hipster',
    'attributes.Ambience.intimate',
    'attributes.Ambience.romantic',
    'attributes.Ambience.touristy',
    'attributes.Ambience.trendy',
    'attributes.Ambience.upscale',
    'attributes.Attire',
    'attributes.BYOB',
    'attributes.BYOB/Corkage',
    'attributes.By Appointment Only',
    'attributes.Caters',
    'attributes.Coat Check',
    'attributes.Corkage',
    'attributes.Delivery',
    'attributes.Dietary Restrictions.dairy-free',
    'attributes.Dietary Restrictions.gluten-free',
    'attributes.Dietary Restrictions.halal',
    'attributes.Dietary Restrictions.kosher',
    'attributes.Dietary Restrictions.soy-free',
    'attributes.Dietary Restrictions.vegan',
    'attributes.Dietary Restrictions.vegetarian',
    'attributes.Dogs Allowed',
    'attributes.Drive-Thru',
    'attributes.Good For Dancing',
    'attributes.Good For Groups',
    'attributes.Good For.breakfast',
    'attributes.Good For.brunch',
    'attributes.Good For.dessert',
    'attributes.Good For.dinner',
    'attributes.Good For.latenight',
    'attributes.Good For.lunch',
    'attributes.Good for Kids',
    'attributes.Hair Types Specialized In.africanamerican',
    'attributes.Hair Types Specialized In.asian',
    'attributes.Hair Types Specialized In.coloring',
    'attributes.Hair Types Specialized In.curly',
    'attributes.Hair Types Specialized In.extensions',
    'attributes.Hair Types Specialized In.kids',
    'attributes.Hair Types Specialized In.perms',
    'attributes.Hair Types Specialized In.straightperms',
    'attributes.Happy Hour',
    'attributes.Has TV',
    'attributes.Music.background_music',
    'attributes.Music.dj',
    'attributes.Music.jukebox',
    'attributes.Music.karaoke',
    'attributes.Music.live',
    'attributes.Music.video',
    'attributes.Noise Level',
    'attributes.Open 24 Hours',
    'attributes.Order at Counter',
    'attributes.Outdoor Seating',
    'attributes.Parking.garage',
    'attributes.Parking.lot',
    'attributes.Parking.street',
    'attributes.Parking.valet',
    'attributes.Parking.validated',
    'attributes.Price Range',
    'attributes.Smoking',
    'attributes.Take-out',
    'attributes.Takes Reservations',
    'attributes.Waiter Service',
    'attributes.Wheelchair Accessible',
    'attributes.Wi-Fi',
    'business_id:ID(Business)',
    'categories:string[]',
    'city',
    'full_address',
    'hours.Friday.close',
    'hours.Friday.open',
    'hours.Monday.close',
    'hours.Monday.open',
    'hours.Saturday.close',
    'hours.Saturday.open',
    'hours.Sunday.close',
    'hours.Sunday.open',
    'hours.Thursday.close',
    'hours.Thursday.open',
    'hours.Tuesday.close',
    'hours.Tuesday.open',
    'hours.Wednesday.close',
    'hours.Wednesday.open',
    'latitude:double',
    'longitude:double',
    'name',
    'neighborhoods:string[]',
    'open:boolean',
    'review_count:int',
    'stars',
    'state',
    'type'
]

checkin = [
    'business_id:ID(Business)',
    'checkin_info.0-0:int',
    'checkin_info.0-1:int',
    'checkin_info.0-2:int',
    'checkin_info.0-3:int',
    'checkin_info.0-4:int',
    'checkin_info.0-5:int',
    'checkin_info.0-6:int',
    'checkin_info.1-0:int',
    'checkin_info.1-1:int',
    'checkin_info.1-2:int',
    'checkin_info.1-3:int',
    'checkin_info.1-4:int',
    'checkin_info.1-5:int',
    'checkin_info.1-6:int',
    'checkin_info.10-0:int',
    'checkin_info.10-1:int',
    'checkin_info.10-2:int',
    'checkin_info.10-3:int',
    'checkin_info.10-4:int',
    'checkin_info.10-5:int',
    'checkin_info.10-6:int',
    'checkin_info.11-0:int',
    'checkin_info.11-1:int',
    'checkin_info.11-2:int',
    'checkin_info.11-3:int',
    'checkin_info.11-4:int',
    'checkin_info.11-5:int',
    'checkin_info.11-6:int',
    'checkin_info.12-0:int',
    'checkin_info.12-1:int',
    'checkin_info.12-2:int',
    'checkin_info.12-3:int',
    'checkin_info.12-4:int',
    'checkin_info.12-5:int',
    'checkin_info.12-6:int',
    'checkin_info.13-0:int',
    'checkin_info.13-1:int',
    'checkin_info.13-2:int',
    'checkin_info.13-3:int',
    'checkin_info.13-4:int',
    'checkin_info.13-5:int',
    'checkin_info.13-6:int',
    'checkin_info.14-0:int',
    'checkin_info.14-1:int',
    'checkin_info.14-2:int',
    'checkin_info.14-3:int',
    'checkin_info.14-4:int',
    'checkin_info.14-5:int',
    'checkin_info.14-6:int',
    'checkin_info.15-0:int',
    'checkin_info.15-1:int',
    'checkin_info.15-2:int',
    'checkin_info.15-3:int',
    'checkin_info.15-4:int',
    'checkin_info.15-5:int',
    'checkin_info.15-6:int',
    'checkin_info.16-0:int',
    'checkin_info.16-1:int',
    'checkin_info.16-2:int',
    'checkin_info.16-3:int',
    'checkin_info.16-4:int',
    'checkin_info.16-5:int',
    'checkin_info.16-6:int',
    'checkin_info.17-0:int',
    'checkin_info.17-1:int',
    'checkin_info.17-2:int',
    'checkin_info.17-3:int',
    'checkin_info.17-4:int',
    'checkin_info.17-5:int',
    'checkin_info.17-6:int',
    'checkin_info.18-0:int',
    'checkin_info.18-1:int',
    'checkin_info.18-2:int',
    'checkin_info.18-3:int',
    'checkin_info.18-4:int',
    'checkin_info.18-5:int',
    'checkin_info.18-6:int',
    'checkin_info.19-0:int',
    'checkin_info.19-1:int',
    'checkin_info.19-2:int',
    'checkin_info.19-3:int',
    'checkin_info.19-4:int',
    'checkin_info.19-5:int',
    'checkin_info.19-6:int',
    'checkin_info.2-0:int',
    'checkin_info.2-1:int',
    'checkin_info.2-2:int',
    'checkin_info.2-3:int',
    'checkin_info.2-4:int',
    'checkin_info.2-5:int',
    'checkin_info.2-6:int',
    'checkin_info.20-0:int',
    'checkin_info.20-1:int',
    'checkin_info.20-2:int',
    'checkin_info.20-3:int',
    'checkin_info.20-4:int',
    'checkin_info.20-5:int',
    'checkin_info.20-6:int',
    'checkin_info.21-0:int',
    'checkin_info.21-1:int',
    'checkin_info.21-2:int',
    'checkin_info.21-3:int',
    'checkin_info.21-4:int',
    'checkin_info.21-5:int',
    'checkin_info.21-6:int',
    'checkin_info.22-0:int',
    'checkin_info.22-1:int',
    'checkin_info.22-2:int',
    'checkin_info.22-3:int',
    'checkin_info.22-4:int',
    'checkin_info.22-5:int',
    'checkin_info.22-6:int',
    'checkin_info.23-0:int',
    'checkin_info.23-1:int',
    'checkin_info.23-2:int',
    'checkin_info.23-3:int',
    'checkin_info.23-4:int',
    'checkin_info.23-5:int',
    'checkin_info.23-6:int',
    'checkin_info.3-0:int',
    'checkin_info.3-1:int',
    'checkin_info.3-2:int',
    'checkin_info.3-3:int',
    'checkin_info.3-4:int',
    'checkin_info.3-5:int',
    'checkin_info.3-6:int',
    'checkin_info.4-0:int',
    'checkin_info.4-1:int',
    'checkin_info.4-2:int',
    'checkin_info.4-3:int',
    'checkin_info.4-4:int',
    'checkin_info.4-5:int',
    'checkin_info.4-6:int',
    'checkin_info.5-0:int',
    'checkin_info.5-1:int',
    'checkin_info.5-2:int',
    'checkin_info.5-3:int',
    'checkin_info.5-4:int',
    'checkin_info.5-5:int',
    'checkin_info.5-6:int',
    'checkin_info.6-0:int',
    'checkin_info.6-1:int',
    'checkin_info.6-2:int',
    'checkin_info.6-3:int',
    'checkin_info.6-4:int',
    'checkin_info.6-5:int',
    'checkin_info.6-6:int',
    'checkin_info.7-0:int',
    'checkin_info.7-1:int',
    'checkin_info.7-2:int',
    'checkin_info.7-3:int',
    'checkin_info.7-4:int',
    'checkin_info.7-5:int',
    'checkin_info.7-6:int',
    'checkin_info.8-0:int',
    'checkin_info.8-1:int',
    'checkin_info.8-2:int',
    'checkin_info.8-3:int',
    'checkin_info.8-4:int',
    'checkin_info.8-5:int',
    'checkin_info.8-6:int',
    'checkin_info.9-0:int',
    'checkin_info.9-1:int',
    'checkin_info.9-2:int',
    'checkin_info.9-3:int',
    'checkin_info.9-4:int',
    'checkin_info.9-5:int',
    'checkin_info.9-6:int',
    'type'
]

review = [
    'business_id:END_ID(Business)',
    'date:int',
    'review_id',
    'stars',
    'text',
    'type',
    'user_id:START_ID(User)',
    'votes.cool:int',
    'votes.funny:int',
    'votes.useful:int'
]

tip = [
    'business_id:END_ID(Business)',
    'date:int',
    'likes:int',
    'text',
    'type',
    'user_id:START_ID(User)'
]
    
user = [
    'average_stars:float',
    'compliments.cool:int',
    'compliments.cute:int',
    'compliments.funny:int',
    'compliments.hot:int',
    'compliments.list:int',
    'compliments.more:int',
    'compliments.note:int',
    'compliments.photos:int',
    'compliments.plain:int',
    'compliments.profile:int',
    'compliments.writer:int',
    'elite:int[]',
    'fans:int',
    # 'friends',
    'name',
    'review_count:int',
    'type',
    'user_id:ID(User)',
    'votes.cool:int',
    'votes.funny:int',
    'votes.useful:int',
    'yelping_since',
]

if __name__ == '__main__':
    with Pool() as p:
        p.map(run, ['business', 'checkin', 'review', 'tip', 'user'])
